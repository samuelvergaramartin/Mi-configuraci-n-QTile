# Copyright (c) 2010 Aldo Cortesi
# Copyright (c) 2010, 2014 dequis
# Copyright (c) 2012 Randall Ma
# Copyright (c) 2012-2014 Tycho Andersen
# Copyright (c) 2012 Craig Barnes
# Copyright (c) 2013 horsik
# Copyright (c) 2013 Tao Sauvage
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from libqtile import bar, layout, widget
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
import os
import subprocess
from libqtile import hook
#from libqtile.widget import PulseVolume
#espacio para mis variables
dispositivo_red="wlo1"
mod = "mod4"
terminal = guess_terminal()

color_barra="#ff0000"
tamano_barra=24
fuente_predeterminada="Ubuntu Mono Nerd Font"
tamano_fuente=16
tamano_grupo_areas_trabajo=20
tamano_fuente_area_actividad_actual=20
color_separador="#ae00ff"#00ffff
tamano_iconos=20

#espacio para las variables del tito

tito_color_barra="#282a36"
tito_tamano_barra=30
tito_tamano_iconos=26
tito_fuente_predeterminada="Ubuntu Mono Nerd Font"
tito_tamano_fuente=16
tito_color_activo="#f1fa8c"
tito_color_fg="#ffffff"
tito_color_bg="#282a36"
tito_color_inactivo="#6272a4"
tito_color_oscuro="#44475a"
tito_color_claro="#bd93f9"
tito_color_urgent="#ff5555"
tito_color_texto1="#bd93f9"
tito_color_actualizaciones="#bc0000" #rojo3
tito_color_grupo1="#ff7f00" #naranja
tito_color_grupo2="#d600f7" #rosa oscuro
tito_color_grupo3="#007bff" #azul
tito_color_grupo4="#c60000" #rojo


keys = [
    # A list of available commands that can be bound to keys can be found
    # at https://docs.qtile.org/en/latest/manual/config/lazy.html
    # Switch between windows
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),
    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
    # Grow windows. If current window is on the edge of screen and direction
    # will be to screen edge - window would shrink.
    Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),

    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),
	
    #teclas para lanzar alacritty
    Key([mod], "Return", lazy.spawn("alacritty"), desc="Launch terminal"),

    #teclas para lanzar rofi
    Key([mod], "m", lazy.spawn("rofi -show drun"), desc="Abrir menu"),
   
    #lanzar firefox
    Key([mod], "f", lazy.spawn("firefox https://search.tosdr.org"), desc="Lanzar firefox"),

   #teclas para lanzar discord
   Key([mod], "d", lazy.spawn("discord-canary"), desc="Lanzar Discord"),

   #teclas para lanzar Visual Studio Code
   Key([mod], "v", lazy.spawn("code"), desc="Lanzar Visual Studio Code"),

   #teclas para lanzar NetCat-Browser
   Key([mod, "shift"], "n", lazy.spawn("/home/sam170703dev/Aplicaciones/NetCat-Browser/NetCat-Browser-0.0.3.AppImage"), desc="Lanzar NetCat Browser v.0.0.3 Beta"),
   #teclas para el control del volumen
   Key([], "XF86AudioLowerVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ -5%"), desc="Bajar el volumen un 5%"),
   Key([], "XF86AudioRaiseVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ +5%"), desc="Subir el volumen un 5%"),
   Key([], "XF86AudioMute", lazy.spawn("pactl set-sink-mute @DEFAULT_SINK@ toogle"), desc="Mutear o desmutear"),

   #teclas para el control del brillo de la pantalla
   Key([], "XF86MonBrightnessUp", lazy.spawn("brightnessctl set +10%"), desc="Subir el brillo un 10%"),
   Key([], "XF86MonBrightnessDown", lazy.spawn("brightnessctl set -10%"), desc="Bajar el brillo un 10%"),

   #teclas para realizar captura de pantalla
   Key([mod], "s", lazy.spawn("scrot"), desc="Capturas la pantalla completa"),
   Key([mod, "shift"], "s", lazy.spawn("flameshot"), desc="Capturar un área de la pantalla"),

   #teclas para abrir spotify
   Key([mod, "shift"], "m", lazy.spawn("spotify"), desc="Lanzar Spotify"),

   #teclas para ver en directo a Strato34 en Twitch
   Key([mod, "shift"], "t", lazy.spawn("firefox https://www.twitch.tv/strato344"), desc="Lanzar directamente el canal de Twitch de Strato34 en Firefox"),

    #Teclas para lanzar minecraft
    #Key([mod, "shift"], "l", lazy.spawn("minecraft-launcher"), desc="Lanzar minecraft-launcher"),
     Key([mod, "shift"], "l", lazy.spawn("/home/sam170703dev/Escritorio/Battly-Launcher/Battly-Launcher-linux-x86_64.AppImage"), desc="Lanzar Battly Launcher"),
    #teclas para ver en directo a Lordzas en Twitch
    Key([mod], "l", lazy.spawn("firefox https://twitch.tv/lordzas0110"), desc="Lanzar directamente el canal de Twitch de Lordzas en Firefox"),
    
    #teclas para lanzar Youtube en el navegador
    Key([mod], "y", lazy.spawn("firefox https://youtube.com"), desc="Lanzar Youtube"),

    #teclas para lanzar Youtube Music
    Key([mod, "shift"], "y", lazy.spawn("firefox https://music.youtube.com"), desc="Lanzar Youtube Music"),

    #teclas para lanzar Twitch
    Key([mod], "t", lazy.spawn("firefox https://twitch.tv"), desc="Lanzar Twitch"),

    #teclas para lanzar Discord Developer Portal

    Key([mod, "shift"], "d", lazy.spawn("firefox https://discord.com/developers/docs/intro"), desc="Lanzar Discord Developer Portal"),

    #teclas para abrir el visor de imágenes
    Key([mod], "i", lazy.spawn("geeqie"), desc="Lanzar el visor de imágenes"),

    #teclas para abrir la configuración bluetooth
    Key([mod], "b", lazy.spawn("blueman-manager"), desc="Abrir la configuración de bluetooth"),

    #teclas para abrir el mezclador de volumen
    #
    Key([mod, "shift"], "v", lazy.spawn("pavucontrol"), desc="Abrir el mezclador de volumen"),

    #teclas para lanzar Premid
    Key([mod], "p", lazy.spawn("bash /home/sam170703dev/launchers/premid.sh"), desc="Lanzar Premid"),
    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "w", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),
]

groups = [Group(i) for i in [
    "󰙯","","󰈹","","","","󰝰", ""
]]

for i, group in enumerate(groups):
    numeroEscritorio =str(i+1)
    keys.extend(
        [
            # mod1 + letter of group = switch to group
            Key(
                [mod],
                numeroEscritorio,
                lazy.group[group.name].toscreen(),
                desc="Switch to group {}".format(group.name),
            ),
            # mod1 + shift + letter of group = switch to & move focused window to group
            Key(
                [mod, "shift"],
                numeroEscritorio,
                lazy.window.togroup(group.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(group.name),
            ),
            # Or, use below if you prefer not to switch to that group.
            # # mod1 + shift + letter of group = move focused window to group
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="move focused window to group {}".format(i.name)),
        ]
    )

layouts = [
    layout.Columns(border_focus_stack=["#d75f5f", "#8f3d3d"], border_width=4),
    layout.Max(),
    # Try more layouts by unleashing below layouts.
    # layout.Stack(num_stacks=2),
    # layout.Bsp(),
    # layout.Matrix(),
    # layout.MonadTall(),
    # layout.MonadWide(),
    # layout.RatioTile(),
    # layout.Tile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]

widget_defaults = dict(
    font=fuente_predeterminada,
    fontsize=tamano_fuente,
    padding=1,
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        top=bar.Bar(
            [
                widget.Sep(
                    linewidth=0,
                    padding=6,
                    foreground="#00ff74",
                    background=color_separador
                ),
                widget.GroupBox(
                    active="#00ffff",
                    highlight_method="line",
                    background=tito_color_barra,#ae00ff
                    margin_x=5,
                    margin_y=5,
                    padding=5,
                    rounded=True,
                    this_current_screen_border="#ff00d4",
                    this_screen_border="#ff8700",
                    block_highlight_text_color="#ff8700",
                    inactive="#0ce53a",
                    disable_drag=True,
                    fontsize=tamano_grupo_areas_trabajo,
                    urgent_alert_method="block",
                    urgent_border="#fffb00"
                ),
                widget.Sep(
                    linewidth=0,
                    padding=6,
                    foreground="#00ff74",
                    background=color_separador
                ),
                widget.Prompt(),
                widget.WindowName(
                    background=tito_color_barra,#ff00b6
                    empty_group_string="Entorno de trabajo de Samuel",
                    foreground="#ff8700",#00ff74
                    fontsize=tamano_fuente_area_actividad_actual,
                    padding=10
                ),
                widget.Sep(
                    linewidth=0,
                    padding=6,
                    foreground="#00ff74",
                    background=color_separador
                ),
                widget.Systray(
                    icon_size=tito_tamano_iconos,#26
                    background=tito_color_barra#00f31a
                ),
                widget.Sep(
                    linewidth=0,
                    padding=6,
                    foreground="#00ff74",
                    background=color_separador
                ),
                
                #comienzo del grupo 1
                widget.TextBox(
                    text=" ",  
                    #foreground=tito_color_fg,
                    foreground=tito_color_grupo1,
                    background=tito_color_bg,
                    fontsize=tito_tamano_barra + 5,
                    padding=-3
                ),
                widget.TextBox(
                    text="  : ",#temperatura
                    foreground=tito_color_fg,
                    background=tito_color_grupo1,
                    fontsize=tamano_iconos
                ),
                widget.ThermalSensor(
                    foreground=tito_color_fg,
                    background=tito_color_grupo1,
                    threshold=50,
                    tag_sensor="Composite",
                    fmt='{} '
                ),
                widget.TextBox(
                    text=" 󰍛 :",#RAM
                    foreground=tito_color_fg,
                    background=tito_color_grupo1,
                    fontsize=tamano_iconos

                ),
                widget.Memory(
                    foreground=tito_color_fg,
                    background=tito_color_grupo1
                ),
                #widget.Sep(
                    #linewidth=0,
                   # padding=6,
                  #  foreground="#00ff74",
                 #   background=color_separador
                #),
                widget.TextBox(
                    text="",
                    foreground=tito_color_grupo1,
                    background=tito_color_bg,
                    fontsize=tito_tamano_barra,
                    padding=-1

                ),
                #fin del grupo 1
                #comienzo del grupo 2
                widget.TextBox(
                    text=" ",  
                    #foreground=tito_color_fg,
                    foreground=tito_color_grupo2,
                    background=tito_color_bg,
                    fontsize=tito_tamano_barra + 5,
                    padding=-3
                ),
                widget.TextBox(
                    text=" 󰚰 : ", #Updates
                    foreground=tito_color_fg,
                    background=tito_color_grupo2,
                    fontsize=tamano_iconos
                ),
                widget.CheckUpdates(
                    background=tito_color_grupo2,
                    color_have_updates=tito_color_actualizaciones,
                    color_no_updates=tito_color_fg,
                    no_update_string='0',
                    display_format='{updates}',
                    update_interval=1800,
                    distro='Arch_checkupdates'
                ),
                widget.TextBox(
                    text=" 󱄙 :",
                    foreground=tito_color_fg,
                    background=tito_color_grupo2,
                    fontsize=15
                ),
                widget.Net(
                    foreground=tito_color_fg,
                    background=tito_color_grupo2,
                    format='  : {down}  : {up}',
                    interface=dispositivo_red,
                    use_bits='true'
                ),
                #widget.Sep(
                    #linewidth=0,
                   # padding=6,
                  #  foreground="#00ff74",
                 #   background=color_separador
                #),
                widget.TextBox(
                    text="",
                    foreground=tito_color_grupo2,
                    background=tito_color_bg,
                    fontsize=tito_tamano_barra,
                    padding=-1

                ),
                #fin del grupo 2

                #comienzo del grupo 3
                #widget.Clock(format="%d/%m/%Y %A %h:%mm tt"),
                widget.TextBox(
                    text=" ",  
                    #foreground=tito_color_fg,
                    foreground=tito_color_grupo3,
                    background=tito_color_bg,
                    fontsize=tito_tamano_barra + 5,
                    padding=-3
                ),
                widget.Clock(
                    background=tito_color_grupo3,
                    foreground=tito_color_fg,
                    format="%A %d/%m/%Y %I:%M:%S %p"
                  
                ),
                widget.TextBox(
                    text="  : ",
                    background=tito_color_grupo3,
                    foreground=tito_color_fg,
                    fontsize=15
                ),
                #widget.PulseVolume(
                 #   foreground=tito_color_fg,
                 #   background=tito_color_grupo3,
                 #   limit_max_volume=True,
                 #   fontsize=tito_tamano_fuente
                #),
                widget.Volume(
                    foreground=tito_color_fg,
                    background=tito_color_grupo3,
                    max_chars=3,
                    font='sans',
                    #device='default',
                    #channel='Master',
                    volume_app='pavucontrol',
                    #update_interval=0.2
                    check_mute_string='[off]'
                ),
                #widget.Sep(
                    #linewidth=0,
                   # padding=6,
                  #  foreground="#00ff74",
                 #   background=color_separador
                #),
                widget.TextBox(
                    text="",
                    foreground=tito_color_grupo3,
                    background=tito_color_bg,
                    fontsize=tito_tamano_barra,
                    padding=-1

                ),
                #fin  del grupo 3
                #widget.QuickExit(), #Antiguo botón "Shutdown"

                #inicio del grupo 4
                widget.TextBox(
                    text=" ",  
                    #foreground=tito_color_fg,
                    foreground=color_barra,
                    background=tito_color_bg,
                    fontsize=tito_tamano_barra + 5,
                    padding=-3
                ),
                widget.CurrentLayoutIcon(
                    #background=tito_color_grupo4,
                    scale=0.7
                ),
                widget.CurrentLayout(
                    #background=tito_color_grupo4
                ),
                widget.TextBox(
                    text="",
                    foreground=color_barra,
                    background=tito_color_bg,
                    fontsize=tito_tamano_barra,
                    padding=-1

                ),
                #widget.Sep(
                    #linewidth=0,
                   # padding=6,
                  #  foreground="#00ff74",
                 #   background=color_separador
                #),
                #fin del grupo 4
                
            ],
            tamano_barra,
            background=color_barra,
            # border_width=[2, 0, 2, 0],  # Draw top and bottom borders
            # border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
        ),
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"

@hook.subscribe.startup_once
def autostart():
    home = os.path.expanduser('~')
    subprocess.Popen([home + '/.config/qtile/autostart.sh'])

    # Ruta al archivo AppImage
    appimage_path = "/home/sam170703dev/Aplicaciones/NetCat-Browser/NetCat-Browser-0.0.3.AppImage"

    # Regla para ejecutar el AppImage
    start_appimage_rule = dict(
        wm_class="netcat-browser",
        command=appimage_path,
        screen=0
    )

    # Añade la regla
    if start_appimage_rule not in qtile.config.rules:
        qtile.config.rules.append(start_appimage_rule)
